
--CRUDS
SELECT * FROM CLASE;
--CRUD PARA LA TABLA CLASE
CREATE SEQUENCE KS_CLASE_ID
START WITH 16
INCREMENT BY 1;

CREATE OR REPLACE PACKAGE KPK_CRUD_CLASE IS
    PROCEDURE KSP_BUS_CLASE(KP_ID_CLASE CLASE.ID_CLASE%TYPE,
                            KP_CLASE OUT CLASE%ROWTYPE);
    PROCEDURE KSP_INS_CLASE(KP_NOMBRE_CLASE CLASE.NOMBRE_CLASE%TYPE, KP_DESCRIPCION_CLASE CLASE.DESCRIPCION_CLASE%TYPE, 
                            KP_ARCHIVO CLASE.ARCHIVO%TYPE, KP_KFK_MOD CLASE.KFK_MOD%TYPE); 
    PROCEDURE KSP_UP_CLASE(KP_ID_CLASE CLASE.ID_CLASE%TYPE,
                           KP_NOMBRE_CLASE CLASE.NOMBRE_CLASE%TYPE, KP_DESCRIPCION_CLASE CLASE.DESCRIPCION_CLASE%TYPE, 
                           KP_ARCHIVO CLASE.ARCHIVO%TYPE, KP_KFK_MOD CLASE.KFK_MOD%TYPE); 
    PROCEDURE KSP_DEL_CLASE(KP_ID_CLASE CLASE.ID_CLASE%TYPE);
END KPK_CRUD_CLASE;


CREATE OR REPLACE PACKAGE BODY KPK_CRUD_CLASE IS
	--BUSCAR
    PROCEDURE KSP_BUS_CLASE(KP_ID_CLASE CLASE.ID_CLASE%TYPE,
			    KP_CLASE OUT CLASE%ROWTYPE)
    IS
	BEGIN
	    SELECT * INTO KP_CLASE
	    FROM CLASE
	    WHERE ID_CLASE=KP_ID_CLASE;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO HAY DATA');
	END KSP_BUS_CLASE;
    
    PROCEDURE KSP_INS_CLASE(KP_NOMBRE_CLASE CLASE.NOMBRE_CLASE%TYPE, KP_DESCRIPCION_CLASE CLASE.DESCRIPCION_CLASE%TYPE, 
                            KP_ARCHIVO CLASE.ARCHIVO%TYPE, KP_KFK_MOD CLASE.KFK_MOD%TYPE)
        IS
        BEGIN
           INSERT INTO CLASE VALUES (KS_CLASE_ID.NEXTVAL, KP_NOMBRE_CLASE, KP_DESCRIPCION_CLASE, KP_ARCHIVO, KP_KFK_MOD);
           COMMIT;
        EXCEPTION
	       WHEN OTHERS THEN
	           DBMS_OUTPUT.PUT_LINE('NO HAY DATA');
        END KSP_INS_CLASE;
    
    PROCEDURE KSP_UP_CLASE(KP_ID_CLASE CLASE.ID_CLASE%TYPE,
                           KP_NOMBRE_CLASE CLASE.NOMBRE_CLASE%TYPE, KP_DESCRIPCION_CLASE CLASE.DESCRIPCION_CLASE%TYPE, 
                           KP_ARCHIVO CLASE.ARCHIVO%TYPE, KP_KFK_MOD CLASE.KFK_MOD%TYPE)
    IS
    BEGIN
        UPDATE CLASE
        SET NOMBRE_CLASE=KP_NOMBRE_CLASE, DESCRIPCION_CLASE=KP_DESCRIPCION_CLASE, ARCHIVO=KP_ARCHIVO, KFK_MOD=KP_KFK_MOD
        WHERE ID_CLASE=KP_ID_CLASE;
        COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE ACTUALIZÓ');
    END KSP_UP_CLASE;   

    PROCEDURE KSP_DEL_CLASE(KP_ID_CLASE CLASE.ID_CLASE%TYPE)

    IS
    BEGIN
        DELETE FROM CLASE
        WHERE ID_CLASE=KP_ID_CLASE;
        COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO ELIMINÓ'); 
    END KSP_DEL_CLASE;

END KPK_CRUD_CLASE;


--PROBANDO BUSCAR

DECLARE
    C_CLASE CLASE%ROWTYPE;
BEGIN
    KPK_CRUD_CLASE.KSP_BUS_CLASE(1,C_CLASE);
    DBMS_OUTPUT.PUT_LINE(C_CLASE.ID_CLASE ||' '|| C_CLASE.NOMBRE_CLASE
                        ||' '||C_CLASE.DESCRIPCION_CLASE||' '||C_CLASE.ARCHIVO||' '||C_CLASE.KFK_MOD);
END;

--PROBANDO INSERTAR

EXEC KPK_CRUD_CLASE.KSP_INS_CLASE('Manualidades', 'Este es una clase de bisuteria', 'https://www.youtube.com/watch?v=IOOcbIyoW_0', 1);

--PROBANDO ACTUALIZAR

EXEC KPK_CRUD_CLASE.KSP_UP_CLASE(16,'Bisuteria', 'Este es una clase de bisuteria', 'https://www.youtube.com/watch?v=IOOcbIyoW_0', 1);

--PROBANDO ELIMINAR

EXEC KPK_CRUD_CLASE.KSP_DEL_CLASE(16);

SET SERVEROUTPUT ON;

--CRUD PARA LA TABLA CURSO
SELECT * FROM CURSO;   

CREATE SEQUENCE KS_CURSO_ID
START WITH 5
INCREMENT BY 1;

CREATE OR REPLACE PACKAGE KPK_CRUD_CURSO IS
    PROCEDURE KSP_BUS_CURSO(KP_ID_CURSO CURSO.ID_CURSO%TYPE,
                            KP_CURSO OUT CURSO%ROWTYPE);
    PROCEDURE KSP_INS_CURSO(KP_NOMBRE_CURSO CURSO.NOMBRE_CURSO%TYPE, KP_DESCRIPTION_CURSO CURSO.DESCRIPTION_CURSO%TYPE, 
                            KP_KFK_DOCE CURSO.KFK_DOCE%TYPE); 
    PROCEDURE KSP_UP_CURSO(KP_ID_CURSO CURSO.ID_CURSO%TYPE, KP_NOMBRE_CURSO CURSO.NOMBRE_CURSO%TYPE, 
                           KP_DESCRIPTION_CURSO CURSO.DESCRIPTION_CURSO%TYPE, 
                           KP_KFK_DOCE CURSO.KFK_DOCE%TYPE); 
    PROCEDURE KSP_DEL_CURSO(KP_ID_CURSO CURSO.ID_CURSO%TYPE);
   
    END KPK_CRUD_CURSO;

CREATE OR REPLACE PACKAGE BODY KPK_CRUD_CURSO IS
	--BUSCAR
    PROCEDURE KSP_BUS_CURSO(KP_ID_CURSO CURSO.ID_CURSO%TYPE,
			    KP_CURSO OUT CURSO%ROWTYPE)
    IS
	BEGIN
	    SELECT * INTO KP_CURSO
	    FROM CURSO
	    WHERE ID_CURSO=KP_ID_CURSO;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO HAY DATA');
	END KSP_BUS_CURSO;
    
    PROCEDURE KSP_INS_CURSO(KP_NOMBRE_CURSO CURSO.NOMBRE_CURSO%TYPE, KP_DESCRIPTION_CURSO CURSO.DESCRIPTION_CURSO%TYPE, 
                            KP_KFK_DOCE CURSO.KFK_DOCE%TYPE)
        IS
        BEGIN
           INSERT INTO CURSO VALUES (KS_CURSO_ID.NEXTVAL, KP_NOMBRE_CURSO, KP_DESCRIPTION_CURSO, KP_KFK_DOCE);
           COMMIT;
        EXCEPTION
	       WHEN OTHERS THEN
	           DBMS_OUTPUT.PUT_LINE('NO HAY DATA');
        END KSP_INS_CURSO;
    
    PROCEDURE KSP_UP_CURSO(KP_ID_CURSO CURSO.ID_CURSO%TYPE, KP_NOMBRE_CURSO CURSO.NOMBRE_CURSO%TYPE, 
                           KP_DESCRIPTION_CURSO CURSO.DESCRIPTION_CURSO%TYPE, 
                           KP_KFK_DOCE CURSO.KFK_DOCE%TYPE)  
    IS
    BEGIN
        UPDATE CURSO
        SET NOMBRE_CURSO=KP_NOMBRE_CURSO, DESCRIPTION_CURSO=KP_DESCRIPTION_CURSO, KFK_DOCE=KP_KFK_DOCE
        WHERE ID_CURSO=KP_ID_CURSO;
        COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE ACTUALIZÓ');
    END KSP_UP_CURSO;   
    
    PROCEDURE KSP_DEL_CURSO(KP_ID_CURSO CURSO.ID_CURSO%TYPE)

    IS
    BEGIN
        DELETE FROM CURSO
        WHERE ID_CURSO=KP_ID_CURSO;
        COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO ELIMINÓ'); 
    END KSP_DEL_CURSO;
    
END KPK_CRUD_CURSO;

--PROBANDO BUSCAR

DECLARE
    C_CURSO CURSO%ROWTYPE;
BEGIN
    KPK_CRUD_CURSO.KSP_BUS_CURSO(1,C_CURSO);
    DBMS_OUTPUT.PUT_LINE(C_CURSO.ID_CURSO ||' '|| C_CURSO.NOMBRE_CURSO
                        ||' '||C_CURSO.DESCRIPTION_CURSO||' '||C_CURSO.KFK_DOCE);
END;

--PROBANDO INSERTAR

EXEC KPK_CRUD_CURSO.KSP_INS_CURSO('Base de Datos', 'Este es una clase de bd', 3);

--PROBANDO ACTUALIZAR

EXEC KPK_CRUD_CURSO.KSP_UP_CURSO(6,'BD', 'Este es una clase divertida', 3);

--PROBANDO ELIMINAR

EXEC KPK_CRUD_CURSO.KSP_DEL_CURSO(6);

--CRUD PARA LA TABLA DOCENTE

SELECT * FROM DOCENTE;

CREATE SEQUENCE KS_CURSO_ID
START WITH 4
INCREMENT BY 1;

CREATE OR REPLACE PACKAGE KPK_CRUD_DOCENTE IS

	PROCEDURE KSP_BUS_DOCENTE(KP_ID_DOCENTE DOCENTE.KFK_PER%TYPE,
					  KP_DOCENTE OUT DOCENTE%ROWTYPE);
    PROCEDURE KSP_INS_DOCENTE(KP_ESPECIALIDAD DOCENTE.KFK_ESPE%TYPE,
                              KP_ID_DOCENTE DOCENTE.KFK_PER%TYPE,
                              KP_SUELDO DOCENTE.SUELDO%TYPE);
    PROCEDURE KSP_UP_DOCENTE(KP_ID_DOCENTE DOCENTE.KFK_PER%TYPE,
                             KP_ESPECIALIDAD DOCENTE.KFK_ESPE%TYPE,
                             KP_SUELDO DOCENTE.SUELDO%TYPE);
    PROCEDURE KSP_DEL_DOCENTE(KP_ID_DOCENTE DOCENTE.KFK_PER%TYPE);                         
END KPK_CRUD_DOCENTE;

CREATE OR REPLACE PACKAGE BODY KPK_CRUD_DOCENTE IS
	--BUSCAR DOCENTE
	PROCEDURE KSP_BUS_DOCENTE(KP_ID_DOCENTE DOCENTE.KFK_PER%TYPE,
					  KP_DOCENTE OUT DOCENTE%ROWTYPE)
	IS
	BEGIN
	    SELECT * INTO KP_DOCENTE
	    FROM DOCENTE
	    WHERE KFK_PER = KP_ID_DOCENTE; 

	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRO AL DOCENTE');     

	END KSP_BUS_DOCENTE;

	--INSERTAR DOCENTE
	PROCEDURE KSP_INS_DOCENTE(KP_ESPECIALIDAD DOCENTE.KFK_ESPE%TYPE,
                              KP_ID_DOCENTE DOCENTE.KFK_PER%TYPE,
                              KP_SUELDO DOCENTE.SUELDO%TYPE)
	IS
	BEGIN
	     INSERT INTO DOCENTE
	     VALUES(KP_ESPECIALIDAD, KP_ID_DOCENTE, KP_SUELDO);
	     COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE PUDO INSERTAR EL DOCENTE'); 
	END KSP_INS_DOCENTE;
    
    --ACTUALIZAR DOCENTE
	PROCEDURE KSP_UP_DOCENTE(KP_ID_DOCENTE DOCENTE.KFK_PER%TYPE,
                             KP_ESPECIALIDAD DOCENTE.KFK_ESPE%TYPE,
                             KP_SUELDO DOCENTE.SUELDO%TYPE)
	IS
	BEGIN
	     UPDATE DOCENTE
	     SET KFK_ESPE=KP_ESPECIALIDAD, SUELDO=KP_SUELDO
	     WHERE KFK_PER=KP_ID_DOCENTE;
	     COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE PUDO ACTUALIZAR DOCENTE');     

	END KSP_UP_DOCENTE;
    
    --ELIMINAR DOCENTE
	PROCEDURE KSP_DEL_DOCENTE(KP_ID_DOCENTE DOCENTE.KFK_PER%TYPE)
	IS
	BEGIN
	    UPDATE PERSONA
        SET ESTADO = '0'
	    WHERE ID_PERSONA=KP_ID_DOCENTE;
        
        DELETE DOCENTE
        WHERE KFK_PER=KP_ID_DOCENTE;
	    COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE PUDO ELIMINAR DOCENTE');  
	END KSP_DEL_DOCENTE;
    
END KPK_CRUD_DOCENTE;

--PROBANDO BUSCAR
DECLARE
    V_DOCENTE DOCENTE%ROWTYPE;
BEGIN
    kpk_crud_docente.ksp_bus_docente(3, V_DOCENTE);
    DBMS_OUTPUT.PUT_LINE(V_DOCENTE.SUELDO);
END;

--PROBANDO INSERTAR
EXEC kpk_crud_docente.ksp_ins_docente(1,9,1000);

--PROBANDO ACTUALIZAR
EXEC kpk_crud_docente.ksp_up_docente(9, 2, 800);

--PROBANDO ELIMINAR
EXEC kpk_crud_docente.ksp_del_docente(9);

--CRUD PARA ESPECIALIZACION

SELECT*FROM ESPECIALIZACION;

CREATE SEQUENCE KS_ESPECIALIZACION_ID
START WITH 6
INCREMENT BY 1;

CREATE OR REPLACE PACKAGE KPK_CRUD_ESPECIALIZACION IS

	PROCEDURE KSP_BUS_ESPECIALIZACION(KP_ID_ESPECIALIZACION ESPECIALIZACION.ID_ESPECIALIZACION%TYPE,
					  KP_ESPECIALIZACION OUT ESPECIALIZACION%ROWTYPE);
	PROCEDURE KSP_INS_ESPECIALIZACION(KP_ESPECIALIZACION ESPECIALIZACION.ESPECIALIZACION%TYPE);
	PROCEDURE KSP_UP_ESPECIALIZACION (KP_ID_ESPECIALIZACION ESPECIALIZACION.ID_ESPECIALIZACION%TYPE,
                                            KP_ESPECIALIZACION ESPECIALIZACION.ESPECIALIZACION%TYPE);
	PROCEDURE KSP_DEL_ESPECIALIZACION (KP_ID_ESPECIALIZACION ESPECIALIZACION.ID_ESPECIALIZACION%TYPE);

END KPK_CRUD_ESPECIALIZACION;

CREATE OR REPLACE PACKAGE BODY KPK_CRUD_ESPECIALIZACION IS
	--BUSCAR ESTUDIANTE
	PROCEDURE KSP_BUS_ESPECIALIZACION(KP_ID_ESPECIALIZACION ESPECIALIZACION.ID_ESPECIALIZACION%TYPE,
					  KP_ESPECIALIZACION OUT ESPECIALIZACION%ROWTYPE)
	IS
	BEGIN
	    SELECT * INTO KP_ESPECIALIZACION
	    FROM ESPECIALIZACION
	    WHERE ID_ESPECIALIZACION = KP_ID_ESPECIALIZACION; 

	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRO ESPECIALIZACIONES');     

	END KSP_BUS_ESPECIALIZACION;

	--INSERTAR 
	PROCEDURE KSP_INS_ESPECIALIZACION(KP_ESPECIALIZACION ESPECIALIZACION.ESPECIALIZACION%TYPE)
    
	IS
	BEGIN
	     INSERT INTO ESPECIALIZACION
	     VALUES(KS_ESPECIALIZACION_ID.NEXTVAL, KP_ESPECIALIZACION);
	     COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE PUDO INSERTAR ESPECIALIZACION'); 
	END KSP_INS_ESPECIALIZACION;
    
    --ACTUALIZAR
	PROCEDURE KSP_UP_ESPECIALIZACION (KP_ID_ESPECIALIZACION ESPECIALIZACION.ID_ESPECIALIZACION%TYPE,
                                            KP_ESPECIALIZACION ESPECIALIZACION.ESPECIALIZACION%TYPE)
	IS
	BEGIN
	     UPDATE ESPECIALIZACION
	     SET ESPECIALIZACION=KP_ESPECIALIZACION
	     WHERE ID_ESPECIALIZACION=KP_ID_ESPECIALIZACION;
	     COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE PUDO ACTUALIZAR ESPECIALIZACION');     

	END KSP_UP_ESPECIALIZACION;
    
    --ELIMINAR
	PROCEDURE KSP_DEL_ESPECIALIZACION (KP_ID_ESPECIALIZACION ESPECIALIZACION.ID_ESPECIALIZACION%TYPE)
	IS
	BEGIN
	    DELETE ESPECIALIZACION
	    WHERE ID_ESPECIALIZACION=KP_ID_ESPECIALIZACION;
	    COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE PUDO ELIMINAR ESPECIALIZACION');  
	END KSP_DEL_ESPECIALIZACION;
    
END KPK_CRUD_ESPECIALIZACION;

--PROBAR
SELECT* FROM ESPECIALIZACION;

SET SERVEROUTPUT ON;
--BUSCAR
DECLARE
    E_ESPECIALIZACION ESPECIALIZACION%ROWTYPE;
BEGIN
    KPK_CRUD_ESPECIALIZACION.KSP_BUS_ESPECIALIZACION(3,E_ESPECIALIZACION);
    DBMS_OUTPUT.PUT_LINE(E_ESPECIALIZACION.ID_ESPECIALIZACION ||' '|| E_ESPECIALIZACION.ESPECIALIZACION);
END;

--INSERTAR
EXEC KPK_CRUD_ESPECIALIZACION.KSP_INS_ESPECIALIZACION('Cheff');

--ACTUALIZAR
EXEC KPK_CRUD_ESPECIALIZACION.KSP_UP_ESPECIALIZACION(6, 'Reposteria');

--ELIMINAR
EXEC KPK_CRUD_ESPECIALIZACION.KSP_DEL_ESPECIALIZACION(6);

--CRUD PARA LA TABLA INSCRIPCION
SELECT *FROM INSCRIPCION;

CREATE SEQUENCE KS_INSCRIPCION_ID
START WITH 11
INCREMENT BY 1;

CREATE OR REPLACE PACKAGE KPK_CRUD_INSCRIPCION IS
    PROCEDURE KSP_BUS_INSCRIPCION(KP_ID_INSCRIPTION INSCRIPCION.ID_INSCRIPTION%TYPE,
			                      KP_INSCRIPCION OUT INSCRIPCION%ROWTYPE);
    PROCEDURE KSP_INS_INSCRIPCION(KP_FECHA INSCRIPCION.FECHA%TYPE, KP_ESTADO INSCRIPCION.ESTADO%TYPE, 
                                  KP_VALORACION INSCRIPCION.VALORACION%TYPE,                            
                                  KP_KFK_PER INSCRIPCION.KFK_PER%TYPE, KP_KFK_CUR INSCRIPCION.KFK_CUR%TYPE);
    PROCEDURE KSP_UP_INSCRIPCION(KP_ID_INSCRIPTION INSCRIPCION.ID_INSCRIPTION%TYPE,
                                  KP_FECHA INSCRIPCION.FECHA%TYPE, KP_ESTADO INSCRIPCION.ESTADO%TYPE,
                                  KP_VALORACION INSCRIPCION.VALORACION%TYPE,
                                  KP_KFK_PER INSCRIPCION.KFK_PER%TYPE, KP_KFK_CUR INSCRIPCION.KFK_CUR%TYPE);
    PROCEDURE KSP_DEL_INSCRIPCION(KP_ID_INSCRIPTION INSCRIPCION.ID_INSCRIPTION%TYPE);
END KPK_CRUD_INSCRIPCION;

CREATE OR REPLACE PACKAGE BODY KPK_CRUD_INSCRIPCION IS
	--BUSCAR
    PROCEDURE KSP_BUS_INSCRIPCION(KP_ID_INSCRIPTION INSCRIPCION.ID_INSCRIPTION%TYPE,
			    KP_INSCRIPCION OUT INSCRIPCION%ROWTYPE)
	IS
	BEGIN
	    SELECT * INTO KP_INSCRIPCION
	    FROM INSCRIPCION
	    WHERE ID_INSCRIPTION=KP_ID_INSCRIPTION;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO HAY DATA');
	END KSP_BUS_INSCRIPCION;
    PROCEDURE KSP_INS_INSCRIPCION(KP_FECHA INSCRIPCION.FECHA%TYPE, KP_ESTADO INSCRIPCION.ESTADO%TYPE, 
                                  KP_VALORACION INSCRIPCION.VALORACION%TYPE,
                                  KP_KFK_PER INSCRIPCION.KFK_PER%TYPE, KP_KFK_CUR INSCRIPCION.KFK_CUR%TYPE)
    IS
    BEGIN
        INSERT INTO INSCRIPCION
        VALUES (KS_INSCRIPCION_ID.NEXTVAL,KP_FECHA,KP_ESTADO,KP_VALORACION,KP_KFK_PER,KP_KFK_CUR);
        COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE INSERTÓ');
    END KSP_INS_INSCRIPCION;
    PROCEDURE KSP_UP_INSCRIPCION(KP_ID_INSCRIPTION INSCRIPCION.ID_INSCRIPTION%TYPE,
                                 KP_FECHA INSCRIPCION.FECHA%TYPE, KP_ESTADO INSCRIPCION.ESTADO%TYPE, 
                                 KP_VALORACION INSCRIPCION.VALORACION%TYPE,
                                 KP_KFK_PER INSCRIPCION.KFK_PER%TYPE, KP_KFK_CUR INSCRIPCION.KFK_CUR%TYPE)
    IS
    BEGIN
        UPDATE
        INSCRIPCION
        SET FECHA=KP_FECHA, ESTADO=KP_ESTADO,VALORACION=KP_VALORACION, KFK_PER=KP_KFK_PER,KFK_CUR=KP_KFK_CUR
        WHERE ID_INSCRIPTION=KP_ID_INSCRIPTION;
        COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE ACTUALIZÓ');
    END KSP_UP_INSCRIPCION;
    PROCEDURE KSP_DEL_INSCRIPCION(KP_ID_INSCRIPTION INSCRIPCION.ID_INSCRIPTION%TYPE)
    IS
    BEGIN
        DELETE FROM INSCRIPCION
        WHERE ID_INSCRIPTION=KP_ID_INSCRIPTION;
        COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO ELIMINÓ');        
    END KSP_DEL_INSCRIPCION;
   
END KPK_CRUD_INSCRIPCION;

--PROBANDO INSERTAR
EXEC KPK_CRUD_INSCRIPCION.KSP_INS_INSCRIPCION('12-MAY-02',1,3,4,3);
--PROBANDO INSERTAR
EXEC KPK_CRUD_INSCRIPCION.KSP_UP_INSCRIPCION(11,'12-JUN-02', 2,1,5,2);
--PROBANDO INSERTAR
EXEC KPK_CRUD_INSCRIPCION.KSP_DEL_INSCRIPCION(11);

--PROBANDO BUSCAR
DECLARE
    V_INSCRIPCION INSCRIPCION%ROWTYPE;
BEGIN
    KPK_CRUD_INSCRIPCION.KSP_BUS_INSCRIPCION(2,V_INSCRIPCION);
    DBMS_OUTPUT.PUT_LINE(V_INSCRIPCION.ID_INSCRIPTION ||' '|| V_INSCRIPCION.FECHA
                        ||' '||V_INSCRIPCION.ESTADO||' '||
                               V_INSCRIPCION.VALORACION||' '||
                               V_INSCRIPCION.KFK_PER||' '||V_INSCRIPCION.KFK_CUR);
END;

--CRUD PARA LA TABLA INSCRIPCIONCLASE
SELECT *FROM INSCRIPCIONCLASE;

CREATE SEQUENCE KS_IC_ID
START WITH 37
INCREMENT BY 1;

CREATE OR REPLACE PACKAGE KPK_CRUD_INSCRIPCIONCLASE IS
    PROCEDURE KSP_BUS_INSCRIPCIONCLASE(KP_ID_IC INSCRIPCIONCLASE.ID_IC%TYPE,
			                           KP_INSCRIPCIONCLASE OUT INSCRIPCIONCLASE%ROWTYPE);
    PROCEDURE KSP_INS_INSCRIPCIONCLASE(KP_ESTADO INSCRIPCIONCLASE.ESTADO%TYPE, 
                                       KP_KFK_INS INSCRIPCIONCLASE.KFK_INS%TYPE, KP_KFK_CLASS INSCRIPCIONCLASE.KFK_CLASS%TYPE);
    PROCEDURE KSP_UP_INSCRIPCIONCLASE(KP_ID_IC INSCRIPCIONCLASE.ID_IC%TYPE,
                                       KP_ESTADO INSCRIPCIONCLASE.ESTADO%TYPE, 
                                       KP_KFK_INS INSCRIPCIONCLASE.KFK_INS%TYPE, KP_KFK_CLASS INSCRIPCIONCLASE.KFK_CLASS%TYPE);
    PROCEDURE KSP_DEL_INSCRIPCIONCLASE(KP_ID_IC INSCRIPCIONCLASE.ID_IC%TYPE);
END KPK_CRUD_INSCRIPCIONCLASE;

CREATE OR REPLACE PACKAGE BODY KPK_CRUD_INSCRIPCIONCLASE IS
	--BUSCAR
     PROCEDURE KSP_BUS_INSCRIPCIONCLASE(KP_ID_IC INSCRIPCIONCLASE.ID_IC%TYPE,
			                      KP_INSCRIPCIONCLASE OUT INSCRIPCIONCLASE%ROWTYPE)
	IS
	BEGIN
	    SELECT * INTO KP_INSCRIPCIONCLASE
	    FROM INSCRIPCIONCLASE
	    WHERE ID_IC=KP_ID_IC;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO HAY DATA');
	END KSP_BUS_INSCRIPCIONCLASE;
     PROCEDURE KSP_INS_INSCRIPCIONCLASE(KP_ESTADO INSCRIPCIONCLASE.ESTADO%TYPE, 
                                  KP_KFK_INS INSCRIPCIONCLASE.KFK_INS%TYPE, KP_KFK_CLASS INSCRIPCIONCLASE.KFK_CLASS%TYPE)
    IS
    BEGIN
        INSERT INTO INSCRIPCIONCLASE
        VALUES (KS_IC_ID.NEXTVAL,KP_ESTADO,KP_KFK_INS,KP_KFK_CLASS);
        COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE INSERTÓ');
    END KSP_INS_INSCRIPCIONCLASE;
     PROCEDURE KSP_UP_INSCRIPCIONCLASE(KP_ID_IC INSCRIPCIONCLASE.ID_IC%TYPE,
                                       KP_ESTADO INSCRIPCIONCLASE.ESTADO%TYPE, 
                                       KP_KFK_INS INSCRIPCIONCLASE.KFK_INS%TYPE, KP_KFK_CLASS INSCRIPCIONCLASE.KFK_CLASS%TYPE)
    IS
    BEGIN
        UPDATE
        INSCRIPCIONCLASE
        SET ESTADO=KP_ESTADO,KFK_INS=KP_KFK_INS,KFK_CLASS=KP_KFK_CLASS
        WHERE ID_IC=KP_ID_IC;
        COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE ACTUALIZÓ');
    END KSP_UP_INSCRIPCIONCLASE;
     PROCEDURE KSP_DEL_INSCRIPCIONCLASE(KP_ID_IC INSCRIPCIONCLASE.ID_IC%TYPE)
    IS
    BEGIN
        DELETE FROM INSCRIPCIONCLASE
        WHERE ID_IC=KP_ID_IC;
        COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO ELIMINÓ');        
    END KSP_DEL_INSCRIPCIONCLASE; 
   
END KPK_CRUD_INSCRIPCIONCLASE;

--PROBANDO INSERTAR
EXEC KPK_CRUD_INSCRIPCIONCLASE.KSP_INS_INSCRIPCIONCLASE(1,3,4);
--PROBANDO INSERTAR
EXEC KPK_CRUD_INSCRIPCIONCLASE.KSP_UP_INSCRIPCIONCLASE(37,0,1,5);
--PROBANDO INSERTAR
EXEC KPK_CRUD_INSCRIPCIONCLASE.KSP_DEL_INSCRIPCIONCLASE(37);

--PROBANDO BUSCAR
DECLARE
    V_INSCRIPCIONCLASE INSCRIPCIONCLASE%ROWTYPE;
BEGIN
    KPK_CRUD_INSCRIPCIONCLASE.KSP_BUS_INSCRIPCIONCLASE(2,V_INSCRIPCIONCLASE);
    DBMS_OUTPUT.PUT_LINE(V_INSCRIPCIONCLASE.ID_IC||' '||V_INSCRIPCIONCLASE.ESTADO||' '||V_INSCRIPCIONCLASE.KFK_INS||' '||V_INSCRIPCIONCLASE.KFK_CLASS);
END;

---CRUD PARA TABLA MODULO
SELECT*FROM MODULO;

CREATE SEQUENCE KS_MODULO_ID
START WITH 13
INCREMENT BY 1;

CREATE OR REPLACE PACKAGE KPK_CRUD_MODULO IS

	PROCEDURE KSP_BUS_MODULO(KP_ID_MODULO MODULO.ID_MODULO%TYPE,
					  KP_MODULO OUT MODULO%ROWTYPE);
    PROCEDURE KSP_INS_MODULO(KP_NOMBRE_MODULO MODULO.NOMBRE_MODULO%TYPE, 
				KP_PK_CUR MODULO.KFK_CUR%TYPE);
    PROCEDURE KSP_UP_MODULO (KP_ID_MODULO MODULO.ID_MODULO%TYPE,
                                KP_NOMBRE_MODULO MODULO.NOMBRE_MODULO%TYPE, 
				KP_PK_CUR MODULO.KFK_CUR%TYPE);
    PROCEDURE KSP_DEL_MODULO(KP_ID_MODULO MODULO.ID_MODULO%TYPE);
                      
END KPK_CRUD_MODULO;

CREATE OR REPLACE PACKAGE BODY KPK_CRUD_MODULO IS
	--BUSCAR ESTUDIANTE
	PROCEDURE KSP_BUS_MODULO(KP_ID_MODULO MODULO.ID_MODULO%TYPE,
					  KP_MODULO OUT MODULO%ROWTYPE)
	IS
	BEGIN
	    SELECT * INTO KP_MODULO
	    FROM MODULO
	    WHERE ID_MODULO = KP_ID_MODULO; 

	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRO DATOS');     

	END KSP_BUS_MODULO;
    
    --INSERTAR ESTUDIANTE
	PROCEDURE KSP_INS_MODULO(KP_NOMBRE_MODULO MODULO.NOMBRE_MODULO%TYPE, 
				KP_PK_CUR MODULO.KFK_CUR%TYPE)
	IS
	BEGIN
	     INSERT INTO MODULO
	     VALUES(KS_MODULO_ID.NEXTVAL, KP_NOMBRE_MODULO, KP_PK_CUR);
	     COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE PUDO INSERTAR MODULO'); 
	END KSP_INS_MODULO;
    
    --ACTUALIZAR
	PROCEDURE KSP_UP_MODULO (KP_ID_MODULO MODULO.ID_MODULO%TYPE,
                                KP_NOMBRE_MODULO MODULO.NOMBRE_MODULO%TYPE, 
				KP_PK_CUR MODULO.KFK_CUR%TYPE)
	IS
	BEGIN
	     UPDATE MODULO
	     SET NOMBRE_MODULO=KP_NOMBRE_MODULO, KFK_CUR=KP_PK_CUR
	     WHERE ID_MODULO=KP_ID_MODULO;
	     COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE PUDO ACTUALIZAR MODULO');     

	END KSP_UP_MODULO;

    --ELIMINAR
    PROCEDURE KSP_DEL_MODULO(KP_ID_MODULO MODULO.ID_MODULO%TYPE)
	IS
	BEGIN
	    DELETE 
        FROM MODULO
	    WHERE ID_MODULO=KP_ID_MODULO;
	    COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE PUDO ELIMINAR MODULO');  
	END KSP_DEL_MODULO;
END KPK_CRUD_MODULO;

--PROBAR

SET SERVEROUTPUT ON;
--BUSCAR
DECLARE
    M_MODULO MODULO%ROWTYPE;
BEGIN
    KPK_CRUD_MODULO.KSP_BUS_MODULO(1,M_MODULO);
    DBMS_OUTPUT.PUT_LINE(M_MODULO.ID_MODULO ||' '|| M_MODULO.NOMBRE_MODULO
                        ||' '|| M_MODULO.KFK_CUR);
END;

--INSERTAR
EXEC KPK_CRUD_MODULO.KSP_INS_MODULO('Desarrollo', 2);

--ACTUALIZAR
EXEC KPK_CRUD_MODULO.KSP_UP_MODULO(13, 'Finalizar', 2);

--ELIMINAR
EXEC KPK_CRUD_MODULO.KSP_DEL_MODULO(13);

--CRUD PARA LA TABLA PERSONA

SELECT * FROM PERSONA;
DESC PERSONA;


CREATE SEQUENCE KS_PERSONA_ID
START WITH 9
INCREMENT BY 1;

CREATE OR REPLACE PACKAGE KPK_CRUD_PERSONA IS

	PROCEDURE KSP_BUS_PERSONA(KP_ID_PERSONA PERSONA.ID_PERSONA%TYPE,
                              KP_PERSONA OUT PERSONA%ROWTYPE);
    PROCEDURE KSP_INS_PERSONA(KP_NOMBRE PERSONA.NOMBRE%TYPE, 
                              KP_APELLIDO PERSONA.APELLIDO%TYPE,
                              KP_DNI PERSONA.DNI%TYPE,
                              KP_CORREO PERSONA.CORREO%TYPE,
                              KP_CONTRASEÑA PERSONA.CONTRASEÑA%TYPE,
                              KP_EDAD PERSONA.EDAD%TYPE,
                              KP_SEXO PERSONA.SEXO%TYPE);
    PROCEDURE KSP_UP_PERSONA (KP_ID_PERSONA PERSONA.ID_PERSONA%TYPE,
                              KP_NOMBRE PERSONA.NOMBRE%TYPE, 
                              KP_APELLIDO PERSONA.APELLIDO%TYPE,
                              KP_DNI PERSONA.DNI%TYPE,
                              KP_CORREO PERSONA.CORREO%TYPE,
                              KP_CONTRASEÑA PERSONA.CONTRASEÑA%TYPE,
                              KP_EDAD PERSONA.EDAD%TYPE,
                              KP_SEXO PERSONA.SEXO%TYPE);                        
    PROCEDURE KSP_DEL_PERSONA (KP_ID_PERSONA PERSONA.ID_PERSONA%TYPE);                         
END KPK_CRUD_PERSONA;

CREATE OR REPLACE PACKAGE BODY KPK_CRUD_PERSONA IS
	--BUSCAR PERSONA
	PROCEDURE KSP_BUS_PERSONA(KP_ID_PERSONA PERSONA.ID_PERSONA%TYPE,
					  KP_PERSONA OUT PERSONA%ROWTYPE)
	IS
	BEGIN
	    SELECT * INTO KP_PERSONA
	    FROM PERSONA
	    WHERE ID_PERSONA = KP_ID_PERSONA; 

	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRO A LA PERSONA');     

	END KSP_BUS_PERSONA;

	--INSERTAR PERSONA
	PROCEDURE KSP_INS_PERSONA(KP_NOMBRE PERSONA.NOMBRE%TYPE, 
                              KP_APELLIDO PERSONA.APELLIDO%TYPE,
                              KP_DNI PERSONA.DNI%TYPE,
                              KP_CORREO PERSONA.CORREO%TYPE,
                              KP_CONTRASEÑA PERSONA.CONTRASEÑA%TYPE,
                              KP_EDAD PERSONA.EDAD%TYPE,
                              KP_SEXO PERSONA.SEXO%TYPE)
	IS
	BEGIN
	     INSERT INTO PERSONA
	     VALUES(KS_PERSONA_ID.NEXTVAL, KP_NOMBRE, KP_APELLIDO, KP_DNI, KP_CORREO, KP_CONTRASEÑA, KP_EDAD, KP_SEXO, '1' );
	     COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE PUDO INSERTAR PERSONA'); 
	END KSP_INS_PERSONA;
    
    --ACTUALIZAR PERSONA
	PROCEDURE KSP_UP_PERSONA (KP_ID_PERSONA PERSONA.ID_PERSONA%TYPE,
                              KP_NOMBRE PERSONA.NOMBRE%TYPE, 
                              KP_APELLIDO PERSONA.APELLIDO%TYPE,
                              KP_DNI PERSONA.DNI%TYPE,
                              KP_CORREO PERSONA.CORREO%TYPE,
                              KP_CONTRASEÑA PERSONA.CONTRASEÑA%TYPE,
                              KP_EDAD PERSONA.EDAD%TYPE,
                              KP_SEXO PERSONA.SEXO%TYPE)
	IS
	BEGIN
	     UPDATE PERSONA
	     SET NOMBRE=KP_NOMBRE, APELLIDO=KP_APELLIDO, DNI=KP_DNI, CORREO=KP_CORREO, CONTRASEÑA=KP_CONTRASEÑA, EDAD=KP_EDAD, SEXO=KP_SEXO
	     WHERE ID_PERSONA=KP_ID_PERSONA;
	     COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE PUDO ACTUALIZAR PERSONA');     

	END KSP_UP_PERSONA;
    
    --ELIMINAR PERSONA
	PROCEDURE KSP_DEL_PERSONA (KP_ID_PERSONA PERSONA.ID_PERSONA%TYPE)
	IS
	BEGIN
	    UPDATE PERSONA
        SET ESTADO = '0'
	    WHERE ID_PERSONA=KP_ID_PERSONA;
	    COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE PUDO ELIMINAR PERSONA');  
	END KSP_DEL_PERSONA;
    
END KPK_CRUD_PERSONA;

--PROBANDO BUSCAR
DECLARE
    V_PERSONA PERSONA%ROWTYPE;
BEGIN
    kpk_crud_persona.ksp_bus_persona(1,V_PERSONA);
    DBMS_OUTPUT.PUT_LINE(V_PERSONA.ID_PERSONA ||' - '|| V_PERSONA.NOMBRE ||' - '|| V_PERSONA.CORREO ||' - '|| V_PERSONA.CONTRASEÑA);
END;

--PROBANDO INSERTAR
EXEC kpk_crud_persona.ksp_ins_persona('Pablo','Ruiz','34482455','pablo@gmail.com','123','30-JAN-03','M');

--PROBANDO ACTUALIZAR
EXEC kpk_crud_persona.ksp_up_persona(9,'Pedro','Ruiz','34764455','pedro@gmail.com','12356','01-JAN-03','M');

--PROBANDO ELIMINAR
EXEC kpk_crud_persona.ksp_del_persona(9);

---CRUD PARA TABLA USUARIO

CREATE OR REPLACE PACKAGE KPK_CRUD_USUARIO IS

	PROCEDURE KSP_BUS_USUARIO(KP_ID_USUARIO USUARIO.KFK_PER%TYPE,
					  KP_USUARIO OUT USUARIO%ROWTYPE);
    PROCEDURE KSP_INS_USUARIO(KP_ADMIN USUARIO.ADMIN%TYPE, 
                              KP_KFK_PER USUARIO.KFK_PER%TYPE);
    PROCEDURE KSP_UP_USUARIO(KP_ID_USUARIO USUARIO.KFK_PER%TYPE,
                              KP_ADMIN USUARIO.ADMIN%TYPE);
    PROCEDURE KSP_DEL_USUARIO(KP_ID_USUARIO USUARIO.KFK_PER%TYPE);
    
END KPK_CRUD_USUARIO;

CREATE OR REPLACE PACKAGE BODY KPK_CRUD_USUARIO IS
	--BUSCAR USUARIO
	PROCEDURE KSP_BUS_USUARIO(KP_ID_USUARIO USUARIO.KFK_PER%TYPE,
					  KP_USUARIO OUT USUARIO%ROWTYPE)
	IS
	BEGIN
	    SELECT * INTO KP_USUARIO
	    FROM USUARIO
	    WHERE KFK_PER = KP_ID_USUARIO; 

	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRO AL USUARIO');     

	END KSP_BUS_USUARIO;

	--INSERTAR USUARIO
	PROCEDURE KSP_INS_USUARIO(KP_ADMIN USUARIO.ADMIN%TYPE, 
                              KP_KFK_PER USUARIO.KFK_PER%TYPE)
	IS
	BEGIN
	     INSERT INTO USUARIO
	     VALUES(KP_ADMIN,KP_KFK_PER);
	     COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE PUDO INSERTAR EL USUARIO'); 
	END KSP_INS_USUARIO;
    
    --ACTUALIZAR USUARIO
	PROCEDURE KSP_UP_USUARIO(KP_ID_USUARIO USUARIO.KFK_PER%TYPE,
                              KP_ADMIN USUARIO.ADMIN%TYPE)
	IS
	BEGIN
	     UPDATE USUARIO
	     SET admin=KP_ADMIN
	     WHERE KFK_PER=KP_ID_USUARIO;
	     COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE PUDO ACTUALIZAR USUARIO');     

	END KSP_UP_USUARIO;
    
    --ELIMINAR USUARIO
	PROCEDURE KSP_DEL_USUARIO(KP_ID_USUARIO USUARIO.KFK_PER%TYPE)
	IS
	BEGIN
	    UPDATE PERSONA
        SET ESTADO = '0'
	    WHERE ID_PERSONA=KP_ID_USUARIO;
        
        DELETE USUARIO
        WHERE KFK_PER=KP_ID_USUARIO;
	    COMMIT;
	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE('NO SE PUDO ELIMINAR USUARIO');  
	END KSP_DEL_USUARIO;
    
END KPK_CRUD_USUARIO;

SELECT * FROM usuario;

--PROBANDO BUSCAR
DECLARE
    V_USUARIO USUARIO%ROWTYPE;
BEGIN
    kpk_crud_usuario.ksp_bus_usuario(2, V_USUARIO);
    DBMS_OUTPUT.PUT_LINE(V_USUARIO.ADMIN);
END;

--PROBANDO INSERTAR
EXEC kpk_crud_usuario.ksp_ins_usuario('0', 9);

--PROBANDO ACTUALIZAR
EXEC kpk_crud_usuario.ksp_up_usuario(9, '0');

--PROBANDO ELIMINAR
EXEC kpk_crud_usuario.ksp_del_usuario(9);




